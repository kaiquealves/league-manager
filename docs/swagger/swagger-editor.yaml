openapi: 3.0.3
info:
  title: League Manager - OpenAPI 3.0
  description: |-
    Sample App to manage tournaments, matches and competitions. 

    Some useful links:
    - [Nome da Aplicação](https://url.com/swagger-api/swagger-petstore)
    - [The source API definition for the LeagueManager](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://leaguemanager.io/terms/
  contact:
    email: contact@leaguemanager.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Docs do Produto 
  url: http://leaguemanager.io/docs
servers:
  - url: https://leaguemanager.io/api/v3
tags:
  - name: tournament
    description: Operations used to perform tournaments, leagues and competitions data management
    externalDocs:
      description: More
      url: http://leaguemanager.io/docs/tournaments
  - name: competitor
    description: Operations used to perform competitors (teams or individuals) data management
    externalDocs:
      description: More
      url: http://leaguemanager.io/docs/competitors
  - name: tournamentTemplate
    description: Operations used to perform tournament templates management
    externalDocs:
      description: More
      url: http://leaguemanager.io/docs/tournament-templates
  - name: user
    description: Operations used to perform user data management
    externalDocs:
    description: More
    url: http://leaguemanager.io/docs/users
paths:
  /tournament:
    put:
      tags:
        - tournament
      summary: Update an existing tournament
      description: Update an existing tournament by Id
      operationId: updateTournament
      requestBody:
        description: Update an existent tournament in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid ID supplied
        '404':
          description: Tournament not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tournament
      summary: Creation of a new tournament
      description: Creation of a new tournament
      operationId: addTournament
      requestBody:
        description: Create a new tournament
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tournament'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournament/findByStatus:
    get:
      tags:
        - tournament
      summary: Finds Tournaments by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findTournamentsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: active
            enum:
              - draft
              - active
              - finished
              - canceled
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournament/findByTags:
    get:
      tags:
        - tournament
      summary: Finds Tournaments by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findTournamentsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournament/{tournamentId}:
    get:
      tags:
        - tournament
      summary: Find tournament by ID
      description: Returns a specific tournament
      operationId: getTournamentById
      parameters:
        - name: tournamentId
          in: path
          description: ID of tournament to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Tournament'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tournament
      summary: Updates a tournament registered in database
      description: ''
      operationId: updateTournamentWithForm
      parameters:
        - name: tournamentId
          in: path
          description: ID of tournament that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of tournament that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of tournament that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - tournament
      summary: Deletes a tournament
      description: delete a tournament
      operationId: deleteTournament
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: tournamentId
          in: path
          description: Tournament id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid tournament value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournament/{tournamentId}/uploadImage:
    post:
      tags:
        - tournament
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: tournamentId
          in: path
          description: ID of tournament to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /competitor:
    put:
      tags:
        - competitor
      summary: Update an existing competitor
      description: Update an existing competitor by Id
      operationId: updateCompetitor
      requestBody:
        description: Update an existent competitor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competitor'
          application/xml:
            schema:
              $ref: '#/components/schemas/Competitor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competitor'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competitor'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Competitor'
        '400':
          description: Invalid ID supplied
        '404':
          description: Competitor not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - competitor
      summary: Creation of a new competitor
      description: Creation of a new competitor
      operationId: addCompetitor
      requestBody:
        description: Create a new competitor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competitor'
          application/xml:
            schema:
              $ref: '#/components/schemas/Competitor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competitor'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competitor'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Competitor'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /competitor/findByTournament/{tournamentId}:
    get:
      tags:
        - competitor
      summary: List Competitors of a tournament
      description: Provided tournamentId
      operationId: findCompetitorsOfTournament
      parameters:
        - name: tournamentId
          in: path
          description: Id of tournament
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competitor'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competitor'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /competitor/{competitorId}:
    get:
      tags:
        - competitor
      summary: Find competitor by ID
      description: Returns a specific competitor
      operationId: getCompetitorById
      parameters:
        - name: competitorId
          in: path
          description: ID of competitor to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competitor'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Competitor'
        '400':
          description: Invalid ID supplied
        '404':
          description: Competitor not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - competitor
      summary: Updates a competitor registered in database
      description: ''
      operationId: updateCompetitorWithForm
      parameters:
        - name: competitorId
          in: path
          description: ID of competitor that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of competitor that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of competitor that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - competitor
      summary: Deletes a competitor
      description: delete a competitor
      operationId: deleteCompetitor
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: competitorId
          in: path
          description: Competitor id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid competitor value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /competitor/{competitorId}/uploadImage:
    post:
      tags:
        - competitor
      summary: uploads an image
      description: ''
      operationId: uploadCompetitorLogo
      parameters:
        - name: competitorId
          in: path
          description: ID of competitor to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournamentTemplate:
    put:
      tags:
        - tournamentTemplate
      summary: Update an existing tournament template
      description: Update an existing tournament template by Id
      operationId: updateTournamentTemplate
      requestBody:
        description: Update an existent tournament template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
          application/xml:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'
        '400':
          description: Invalid ID supplied
        '404':
          description: Competitor not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - tournamentTemplate
      summary: Creation of a new tournament template
      description: Creation of a new tournament template
      operationId: addTournamentTemplate
      requestBody:
        description: Create a new tournament template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
          application/xml:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TournamentTemplate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournamentTemplate/findBySport/{sportId}:
    get:
      tags:
        - tournamentTemplate
      summary: List tournament templates related to an specific sport
      description: Provided sportId
      operationId: findTournamentTemplate
      parameters:
        - name: sportId
          in: path
          description: Id of sport
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentTemplate'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentTemplate'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tournamentTemplate/{tournamentTemplateId}:
    get:
      tags:
        - tournamentTemplate
      summary: Find tournament template by ID
      description: Returns a specific tournament template
      operationId: getTournamentTemplateById
      parameters:
        - name: tournamentTemplateId
          in: path
          description: ID of tournament template to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'          
            application/xml:
              schema:
                $ref: '#/components/schemas/TournamentTemplate'
        '400':
          description: Invalid ID supplied
        '404':
          description: Competitor not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - tournamentTemplate
      summary: Deletes a tournament template
      description: delete a tournament template
      operationId: deleteTournamentTemplate
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: tournamentTemplateId
          in: path
          description: Tournament template id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid template value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Sport:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Soccer
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Competitor:
      required:
        - name
        - logoUrl
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Brazil
        logoUrl:
          type: string
          description: Individual photo or team logo
        owner:
          $ref: '#/components/schemas/User'
        tournaments:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tournament'
        status:
          type: string
          description: competitor status in the store
          enum:
            - active
            - inactive
          default: active
      xml:
        name: competitor
    Tournament:
      required:
        - name
        - user
        - type
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: FIFA World Cup - Qatar 2022
        startDate:
          type: string
          format: date
          example: 2022-11-20
        finalDate:
          type: string
          format: date
          example: 2022-12-18
        sport:
          $ref: '#/components/schemas/Sport'
        logoUrl:
          type: string
          description: Tournament logo
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tournamentConfig:
          $ref: '#/components/schemas/TournamentConfig'
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        competitors:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Competitor'
        status:
          type: string
          description: tournament current status
          enum:
            - draft 
            - active
            - finished
            - canceled
          default: draft
        type:
          type: string
          description: tournament type (playoff, league or hybrid)
          enum:
            - playoff 
            - league
            - hybrid
        createdBy:
          $ref: '#/components/schemas/User'
        
      xml:
        name: tournament
    TournamentConfig:
      type: object
      properties:
        tournamentid:
          type: integer
          format: int64
          description: Replicate tournament id
          example: 10092
        hasThirdPlaceGame:
          type: boolean
          default: true
        numberOfGroups:
          type: integer
          format: int
        includeRepechage:
          type: boolean
          default: false
      xml:
        name: tournamentconfig
    TournamentTemplate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
        templateConfig:
            $ref: '#/components/schemas/TournamentConfig'
        status: 
          type: string
          description: Tournament template Status
          example: active
          default: active
          enum:
            - active
            - inactive
      xml:
        name: tournamenttemplate
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Tournament:
      description: Tournament object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tournament'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tournament'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header